#!/bin/bash
# A script to perform MySQL database backup

# Get the home directory of the current user
USER_HOME=$(eval echo ~"$SUDO_USER")

# Check if running as root user
if [[ $EUID -ne 0 ]]; then
    echo "Please run this script as root or using sudo."
    exit 1
fi

# Check the number of arguments
if [ $# -gt 4 ] || [ $# -gt 0 ] && [ $1 = "--help" ]; then
    echo "Usage: $(basename "$0") [BACKUP_USER] [BACKUP_USER_PASSWORD] [DATABASE_NAME] [BACKUP_DIR]"
    echo "using ~/.my.cnf credentials"
    echo "eg. $(basename "$0")"
    echo "eg. $(basename "$0") db_name"
    echo "eg. $(basename "$0") db_name /path/to/backup_dir"
    echo ""
    echo "By manually passing MySQL credentials"
    echo "eg. $(basename "$0") user password"
    echo "eg. $(basename "$0") user password db_name /path/to/backup_dir"
    exit 1
fi

# Set the backup data variables
BACKUP_DATE=$(date +%Y-%m-%d)
DEFAULT_BACKUP_DIR="/var/nsbackups"
BACKUP_DIR=${2:-$DEFAULT_BACKUP_DIR}
BACKUP_HISTORY=10

# Create the backup directory if it doesn't exist
mkdir -p "$DEFAULT_BACKUP_DIR"

# Check if .my.cnf file exists in user's home directory
if [ -f "$USER_HOME/.my.cnf" ]; then
    # Use MySQL credentials from .my.cnf file
    if [ $# -ge 1 ]; then
        DATABASE_NAME="$1"
        DATABASE_DUMP_FILE="$BACKUP_DIR/${DATABASE_NAME}_$BACKUP_DATE.sql"
        mysqldump "$DATABASE_NAME" > "$DATABASE_DUMP_FILE"
    else
        mysqldump --all-databases > "$BACKUP_DIR/mysqlbackup_$BACKUP_DATE.sql"
    fi
else
    # Check if user provided backup credentials
    if [ $# -ge 2 ]; then
        BACKUP_USER="$1"
        BACKUP_USER_PASSWORD="$2"
        if [ $# -ge 4 ]; then
            DATABASE_NAME="$3"
            BACKUP_DIR="$4"
            DATABASE_DUMP_FILE="$BACKUP_DIR/${DATABASE_NAME}_$BACKUP_DATE.sql"
            mysqldump -u "$BACKUP_USER" -p"$BACKUP_USER_PASSWORD" "$DATABASE_NAME" > "$DATABASE_DUMP_FILE"
        else
            BACKUP_DIR="$DEFAULT_BACKUP_DIR"
            mysqldump -u "$BACKUP_USER" -p"$BACKUP_USER_PASSWORD" --all-databases > "$BACKUP_DIR/mysqlbackup_$BACKUP_DATE.sql"
        fi
    else
        echo "Error: Insufficient arguments provided."
        exit 1
    fi
fi

# Remove all but the latest backups if there are more than 10 files
if [ "$BACKUP_DIR" = "$DEFAULT_BACKUP_DIR" ] && [ -n "$(ls -A "$BACKUP_DIR")" ]; then
    cd "$BACKUP_DIR" || exit
    file_count=$(ls -t | wc -l)
    if [ "$file_count" -gt "$BACKUP_HISTORY" ]; then
        ls -t | tail -n +$BACKUP_HISTORY | xargs rm --
        if [ $? -ne 0 ]; then
            echo "No old backups removed"
        else
            echo "Old backup files removed"
        fi
    fi
fi

