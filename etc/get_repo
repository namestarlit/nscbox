#!/usr/bin/env bash

# Enable 'exit on error' and 'pipefail'
set -eo pipefail

# Check if the correct number of arguments are provided
if [ $# -ne 2 ]; then
    echo "Usage: $0 <repository_url> <ball_type (tarball or zipball)>"
    exit 1
fi

# Extract arguments
repository_url="$1"
ball_type="$2"

# Validate ball_type
if [ "$ball_type" != "tarball" ] && [ "$ball_type" != "zipball" ]; then
    echo "Invalid ball_type. Please specify 'tarball' or 'zipball'."
    exit 1
fi

# Extract username and repository name from the URL
username=$(echo "$repository_url" | awk -F'/' '{print $4}')
repo_name=$(echo "$repository_url" | awk -F'/' '{print $5}')

# Determine the default branch using the GitHub API
default_branch=$(curl -s "https://api.github.com/repos/${username}/${repo_name}" | jq -r '.default_branch')

# Define the filename based on the branch name and adjust the extension
if [ "$ball_type" == "tarball" ]; then
    archive_extension="tar.gz"
elif [ "$ball_type" == "zipball" ]; then
    archive_extension="zip"
fi

archive_filename="${username}-${repo_name}-${default_branch}.${archive_extension}"

# Create the GitHub API URL
api_url="https://api.github.com/repos/${username}/${repo_name}/${ball_type}/${default_branch}"

# Download the tarball or zipball using curl, follow redirects, and specify the output filename
curl -L -o "$archive_filename" "$api_url"
echo ""
ls
exit 1
# Determine the archive format and extract accordingly
if [ "$ball_type" == "tarball" ]; then
    tar -xzvf "$archive_filename" --strip-components=1
    rm "$archive_filename"
elif [ "$ball_type" == "zipball" ]; then
    unzip "$archive_filename"
    rm "$archive_filename"
fi

# Note: You can capture and handle errors with an 'if' statement
if [ $? -ne 0 ]; then
  echo "An error occurred, and you can handle it here."
fi

echo "Repository files extracted successfully!"
